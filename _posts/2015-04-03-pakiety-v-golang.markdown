---
layout: post
title: "Пакеты в Golang"
date: 2015-04-03 17:09:03 +0400
comments: true
categories: ["golang", "программирование"]
tags: golang programming
---

Модульность приложений в Golang обеспечивается при помощи пакетов (packages) - логичесих сущностей, которые играют роль одновременно модулей и пространств имён в других языках.

### Про GOPATH

Вся работа с кодом в Golang происходит в месте, называемом Workspace. На практике это директория на диске, путь к которой необходимо определить в переменной `GOPATH` в системе.

Эта директория будет иметь следующую структуру:

	$GOPATH
		|_ bin
		|_ pkg
		|_ src  

* **bin** - сюда будут скопированы запускаемые файлы наших приложений после запуска команды go install.
* **pkg** - тут будут содержаться объектные файлы пакетов (статические библиотеки с расширением .a). Во многих других языках соответствующая папка имеет название obj.
* **src** - это "точка входа" для наших исходников. Эта папка будет содержать структуру исходников приложений и библиотек.

<!-- more -->

### Что представляют собой пакеты?

Пакеты в Go больше всего напоминают пакеты в Java: они также представляют собой каталоги, которые находятся в какой-то поддиректории каталога `$GOPATH/src`. Эти относительные пути (относительно `src`) и являются уникальными именами пакетов в Go. Правда в отличие от Java, где командой import мы можем указать имена импортируемых классов и уже обращаться к ним в коде напрямую, в Go мы импортируем весь пакет, а уже в коде обращаемся к импортируемым из него сущностям через точку после имени пакета:

{% highlight go %}
package main

import "fmt"

func main() {
	fmt.PrintLn("Hello")
}
{% endhighlight %}

Тут `fmt` - это не класс, а пакет, который содержит импортируемую функцию `PrintLn`.

Также в Java разрешается импортировать только публичные классы (с соответствующем модификатором доступа), тогда как в Go будут импортированы все сущности (структуры, переменные, функции/методы), имя которых начинается с заглавной буквы (как функция `PrintLn` из примера выше).

И ещё одно не совсем очевидное отличие. Как я понимаю, ради упрощения и унификации в Go не различаются понятия библиотеки и пакета: пакет и есть библиотека. Мы можем определить пакет вне нашего приложения (в какой-нибудь директории в `src`, но выше каталога с кодом программы) и пользоваться точно также в приложении - просто импортировав пакет по его уникальному пути. В данном случае это и будет аналогом библиотеки в других языках. То есть не нужны никакие другие действия для определения того, что пакет будет являться библиотекой.

### Создание и использование собственных пакетов

Весь код в программах на Go обязательно распределяется по пакетам. А это значит, что каждый исходный файл начинается со строки:

{% highlight go %}
package package_name
{% endhighlight %}

Как говорилось выше уникальность пакета определяется его относительной директорией где-то в `$GOPATH/src`. Как раз эта директория и указывается при импорте одного пакета из другого.

{% highlight go %}
package main

import "MyFirstApp/Utils"
{% endhighlight %}

В данном случае в пакете "main" происходит импорт сущностей из пакета `MyFirstApp/Utils` (это значит, что его абсолютный путь - `$GOPATH/src/MyFirstApp/Utils`).

В исполняемом приложении должен содержаться пакет "main", который в свою очередь будет содержать функцию main() и эта функция будет точкой входа в приложение.

Что касается файлов исходников, в которых будет храниться весь код пакета, то тут есть особенность: неважно какие у них будут имена (главное, что с расширением `.go`) и неважно сколько их будет, Go все равно будет считать их единым пакетом. Главное условие - это то что все файлы будут находится в директории пакета и будут начинаться со строки, означающей принадлежность к пакету `package package_name`.

### Небольшая особенность с запуском приложений, в которых "main" распределён по нескольким файлам

Пакет "main" как любой другой пакет может быть расположен в нескольких файлах, но есть одна особенность при запуске таких приложений. В Go есть команда `go run app.go` - которая неявно компилирует и исполняет приложение. Она требует указания имени файла. так вот в случае, если "main" распределен по нескольким файлам, то нужно указывать все эти файлы в качестве параметров для `go run`. Например:

```
go run app_part1.go app_part2.go
```

### Материалы

Тут содержится официальная информация по теме пакетов (и не только): [http://golang.org/doc/code.html](http://golang.org/doc/code.html)