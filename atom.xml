<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[PoetOfCode' Blog]]></title>
  <link href="http://poetofcode.ru/atom.xml" rel="self"/>
  <link href="http://poetofcode.ru/"/>
  <updated>2015-03-15T14:27:55+04:00</updated>
  <id>http://poetofcode.ru/</id>
  <author>
    <name><![CDATA[PoetOfCode]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Зачем открывать чёртов редактор]]></title>
    <link href="http://poetofcode.ru/blog/2015/03/15/zachiem-otkryvat-chiortov-riedaktor/"/>
    <updated>2015-03-15T13:02:30+04:00</updated>
    <id>http://poetofcode.ru/blog/2015/03/15/zachiem-otkryvat-chiortov-riedaktor</id>
    <content type="html"><![CDATA[<p style="color: #333; font-style: italic">
Я недавно прочитал один прикольный пост Джоэла Спольски. Он рассказывает о том, как двигаться вперед, делать прогресс в чём-либо. И это понимание очень полезно именно в нашем программерском деле.<br>

Приведу отрывок из поста, будет полезно возвращаться к нему в периоды послабления мотивации.
</p>




<!-- more -->




<div>
<p>Многие мои дни проходят так:</p>

<ol style="margin-left: 30px">
<li>Прихожу на работу.
<li>Проверяю почту, хожу по Интернету и т. д.
<li>Решаю, что можно пообедать, прежде чем браться за работу.
<li>Возвращаюсь с обеда.
<li>Проверяю почту, хожу по Интернету и т. д.
<li>Наконец, решаю, что пора начать работать.
<li>Проверяю почту, хожу по Интернету и т. д.
<li>Снова решаю, что теперь действительно пора начать работать.
<li>Запускаю чертов редактор.</li>
<li>Без передышки пишу код, пока не обнаруживаю, что уже полвосьмого вечера.</li>
</ol>

<p>По видимому, между этапами 8 и 9 есть какой то дефект, потому что мне
не всегда удается преодолеть находящуюся между ними пропасть. Самое
трудное для меня – это начать. Тело, находящееся в покое, стремится сохранять состояние покоя. В моем мозгу есть что то невероятно тяжелое,
из за чего его крайне трудно разогнать, но когда он разгонится до полной
скорости, поддерживать ее нетрудно. <...> 
</p>

<p>Может быть, в этом и лежит ключ к продуктивности: <span style="font-style: italic">надо просто начать</span>. Может быть, если программирование парами эффективно, то это
потому, что когда вы планируете со своим приятелем сеанс парного программирования, вы подстегиваете друг друга начать работу.
</p>

<p>Когда я был в Израиле парашютистом, один генерал произнес перед нами небольшую речь по поводу стратегии. Когда пехота ведет бой, сообщил
он нам, у нее может быть только одна стратегия: огонь и движение. Вы движетесь в сторону противника и одновременно ведете огонь из своего оружия. Ваш огонь вынуждает противника спрятать голову, поэтому он не может вести ответный огонь. (Это и имеет в виду солдат, когда кричит «прикрой меня». Это значит «стреляй в противника, чтобы он опустил голову
и не мог стрелять в меня, пока я буду перебегать улицу». И это действует.)
Движение позволяет захватить территорию и приблизиться к врагу, и тогда ваши выстрелы вернее поразят цель. Если вы не движетесь, то развитие событий станет определять противник, а это нехорошо. Если вы не ведете огонь, противник станет вести огонь по вам и уложит вас.
</p>

<p>Я надолго запомнил это. Я заметил, что почти каждый тип военной стратегии, от воздушного боя до больших морских маневров, основан на идее «огня и движения». Мне понадобилось еще 15 лет, чтобы понять, что по принципу «огня и движения» вы достигаете целей в жизни. Надо хоть немного продвигаться вперед, каждый день. Пусть ваш код кривой, с ошибками и никому не нужен. Если вы неуклонно движетесь вперед, совершенствуя код и исправляя ошибки, время на вашей стороне. Будьте осторожны, когда конкуренты открывают по вам огонь. Не хотят ли они просто заставить вас отвечать на их очереди, чтобы вы не смогли двигаться дальше?
</p>

<p><...></p>

<p>Для небольших компаний, таких как моя, «огонь и движение» означает две вещи. Вы должны привлечь время на свою сторону, вы должны ежедневно продвигаться вперед. Рано или поздно вы победите. Все, что мне удалось вчера сделать, – это немного улучшить цветовую схему FogBUGZ.
Это нормально. Все постепенно делается лучше. С каждым днем наша программа становится все лучше, и покупателей становится все больше, и это самое главное. Пока мы не достигли размеров Oracle, нам не нужно выдумывать грандиозные стратегии. Нам надо просто приходить каждое утро
и пытаться запустить редактор.
</p>

<p style="color: #333; font-style: italic">
Полный тест можно найти в книге Д. Спольски &#8220;Джоэл о программировании&#8221;
</p>


</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Манифест стартапера]]></title>
    <link href="http://poetofcode.ru/blog/2015/01/30/manifiest-startapiera/"/>
    <updated>2015-01-30T13:27:13+04:00</updated>
    <id>http://poetofcode.ru/blog/2015/01/30/manifiest-startapiera</id>
    <content type="html"><![CDATA[<p style="color: gray; font-style: italic;">В последнее время читал много всякого материала по теме создании стартапов и решил выделить для себя некоторые пункты, которые показались значимыми.</p>


<p><img src="http://poetofcode.ru/images/startup.jpg" alt="A startup" /></p>

<blockquote><p>Для себя</p></blockquote>

<p>Идея должна решать задачу самого стартапера. Это необходимо для лучшего понимания потребностей пользователя.</p>

<blockquote><p>Настоящий интерес к идее</p></blockquote>

<p>Работа над стартапом &ndash; долгий и трудоёмкий процесс и он может быть закончен только в том случае, если идея будет достаточно интересной, и авторы не потеряют интерес к работе на пол пути.</p>

<blockquote><p>Продукт &ndash; чёткий механизм</p></blockquote>

<p>Продукт должен определять однозначные юзкейсы своего использования. Люди не должны быть сбиты с толку на каком-либо шаге и, напротив, продукт должен способствовать людям беспрепятственно выполнять свои задачи.</p>

<blockquote><p>Ощущение выгоды без обязательств</p></blockquote>

<p>У пользователя должно возникать чувство явной пользы для себя от использования продукта. Хорошим мотиватором для первого знакомства с продуктом являются примитивные искушения: секс, деньги, желание потроллить кого-нибудь или обмануть. И продкт должен &ldquo;поддаваться&rdquo; этому, позволить пользователю почувствовать себя хозяином положения.</p>

<blockquote><p>Железное качество реализации основ</p></blockquote>

<p>Необходимо определиться с главными сценариями в продукте и реализовать их на высшем уровне качества, обеспечить их стабильную работу. Отсюда следует вывод, что технологии и код в реализации хорошей идеи важнее внешнего оформления на старте. Детали дизайна и прочие мелкие доработки могут быть продуманы лучше и доведены до ума позднее.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Проездной на сеть]]></title>
    <link href="http://poetofcode.ru/blog/2015/01/12/proiezdnoi-na-siet/"/>
    <updated>2015-01-12T21:01:33+04:00</updated>
    <id>http://poetofcode.ru/blog/2015/01/12/proiezdnoi-na-siet</id>
    <content type="html"><![CDATA[<p><img src="http://poetofcode.ru/images/durov-mem.jpg" alt="Alt text" /></p>

<p>В недавних своих постах я уже упоминал немного о негативном влиянии сети (интернета) на жизнь. Я решил написать об этом чуть подробнее, потому что сегодня я собираюсь резко сократить потребление интернета в своей жизни.</p>

<p>Какие же проблемы приносит веб?</p>

<p>Чтож, для себя я выделяю следующие (в порядке убывания значимости):</p>

<ul>
<li>Пребывание в сети превратилось для меня в &ldquo;дефолтное&rdquo; занятие, то есть в то, чем можно заниматься, когда не знаешь чем себя занять</li>
<li>Чувство необходимости в онлайн присутствии: я часто проверяю соц.сети, чаты и почту. На самом деле людям не требуется так уж часто общаться, как это происходит в сети. Кроме того, есть другие способы связи &ndash; сотовые, к примеру</li>
<li>Отвлекаешься на пустую, но интересную на первый взгляд информацию &ndash; бесконечные мемы, видео-ролики, цитаты, статьи, музыка и т.д.</li>
<li>Кроме того, в интернете всё часто плохо работает &ndash; либо коннект пропадает, либо подвисают сайты, либо браузер отъедает всю память и комп начинает жутко лагать. Всё это раздражает, заставляет изрядно нервничать.</li>
</ul>


<h1>Решение &ndash; строгий дисконнект</h1>

<p>Вообще-то я раньше уже пробовал бороться со своей интернет-зависимостью. У меня, к примеру, есть полезная кнопка на ноутбуке, которая отрубает WI-FI. Она плоха тем же, чем и хороша &ndash; ей слишком просто пользоваться. И у меня еще никогда не получалось контролировать свои выходы в сеть с помощью неё.</p>

<p>Теперь я решил пойти другим путём. Оказывается выход есть и довольно простой: я собираюсь удалить беспроводное соединение со всех устройств (ноут, смарт, планшет), а так как пароль от него у меня состоит из циферного набора, который я никогда не запоминал, то я остаюсь без интернета. Сам пароль я собираюсь записать и убрать куда-нибудь подальше с глаз.</p>

<p>Подобный эксперимент, кстати, проводил один западный журналист &ndash; <a href="http://geektimes.ru/post/178707/">Я всё ещё здесь: возвращение в Cеть спустя год без Интернета</a></p>

<h1>Что дальше?</h1>

<p>Мне сейчас представляется, что отказ от сети это не только не наказание, а большое благо. Я вообще воспринимаю это как праздник для себя (наконец-то я до этого додумался). Кроме того &ndash; альтернативы просто волшебны: ограниченная музыка (оффлайн-плеер чёрт побери!), реальные книги (не бумажные конечно, а pdf на планшете), заранее закаченные фильмы (не скачал &ndash; не посмотрел)&hellip;в ведь что-то в этом есть!</p>

<h1>Онлайн строго по делу</h1>

<p>К сожалению, мне иногда нужна информация по работе и она есть только в сети. Но я буду выходить в сеть дозированно, только в случае, если оффлайн-материалов не будет хватать для продолжения работы. Ну и постараюсь не затягивать эти интревалы.</p>

<p><em>Буду отписываться от результатах.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Четырнадцатый многому научил]]></title>
    <link href="http://poetofcode.ru/blog/2014/12/27/chietyrnadtsatyi-mnoghomu-nauchil/"/>
    <updated>2014-12-27T14:30:00+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/12/27/chietyrnadtsatyi-mnoghomu-nauchil</id>
    <content type="html"><![CDATA[<p>Близиться Новый Год, старый потихоньку отмирает, не лишним будет подвести итоги и немного &ldquo;посветить фонариком&rdquo; в будущее.</p>

<p><p style="text-align: center; clear: both;">
<img src="http://poetofcode.ru/images/xmas.gif" alt="XMAS"/>
<p></p>

<p>Есть несколько разных мыслей, которые я не хотел бы забывать в будущем, так как скорее всего они ещё пригодятся, подобно тому как пароли от сайтов, на которые ты заходишь всего лишь пару раз в год.</p>

<p>Начнём с общих и &ldquo;жизненных&rdquo;.</p>

<h3>В чём вообще суть вещей?</h3>

<p>За этот год я понял, что когда что-то непонятно &ndash; надо задавать вопросы. Правильно заданный вопрос &ndash; это уже половина ответа. Причём они должны быть максимально конкретными. Тогда, если быть честным в ответах, то можно разрешить сильно запутанную ситуацию и тем самым успокоить себя.</p>

<p>Но иногда конкретный вопрос не получается сформулировать сразу.</p>

<p>Раньше я этого не знал и всё время пытался игнорировать момент диалога с самим собой и приступать сразу к делу. К примеру, думал так: &ldquo;надо жить правильно, надоело уже жить неправильно &ndash; заниматься спортом, пить кефир на ночь, прочитать уже ту умную книгу по истории древних цивилизаций и вообще&hellip;&rdquo;</p>

<p>Но вопрос, которым я озадачился в этом году нехотя, не сразу, но сформировался сам в бэкграунде жизни: &ldquo;Зачем всё это вообще нужно? Какова цель правильной или неправильной жизни?&rdquo;</p>

<p>Не буду тянуть с ответом и кратко отвечу: мы здесь не по какому-то глубинному замыслу, нам просто отведено некоторое небольшое время и наша задача &ndash; его как-то потратить. На какие-нибудь дела, допустим. По большому счёту неважно на какие.</p>

<h3>Щекотливый момент: что мешает жить, не парясь?</h3>

<p>Почему-то человеческий мозг всегда стремиться всё упорядочить, придать вещам больше конкретики. Тогда его мозг успокаивается и испытывает приятное чувство законченности.</p>

<p>И наоборот &ndash; &ldquo;подвешенные&rdquo; в воздухе вопросы, которые почему-то встают вновь и вновь оскорбляют и утомляют мозг. В результате мы стараемся от них уклоняться, мухлюем.</p>

<p>Это, например, проявляется тогда, когда мы не можем устаканить свою жизнь, навести в ней железный порядок. Вот вроде в понедельник ты встаешь с хорошим настроением, ты полон сил, а идеи, которые возникают в голове будто какой-то наркоманский укол штырят тебя не по-детски. Ты говоришь себе внутренне: &ldquo;Ну всё, держись мир, ты ещё никогда не испытывал того, что испытаешь теперь&hellip;со мной!&rdquo;</p>

<p>А через некоторое время ты точно с такой же уверенностью пытаешься наскрести в своей душе какие-нибудь крошки позитива. И их едва хватает на то, чтобы пережить депрессию и не натворить чего-нибудь антигуманного.</p>

<p>Так вот &ndash; в этом году я стал потихоньку принимать мысль, что человека нельзя и не нужно менять. К примеру, вот эту маятниковость. Это заложено в нашу природу и нас будет колбасить до конца дней.</p>

<p>Маленький побочный вывод: утверждение &ldquo;измени своё отношение к жизни&rdquo; не работает. Я миллион раз это делал, этот бред сходит уже на утро, как лёгкое похмелье.</p>

<h3>Пару слов о терминаторстве</h3>

<p>Под этим словом я понимаю упорство в чем-то и единую линию во всём.</p>

<p>Иногда все-таки работают тупые методы самовнушения. Не надо, однако, их переоценивать &ndash; они недолговечны и даже вобщем-то бессмысленны, хотя бы из той предпосылки, что суть вещей &ndash; потратить отведённое время, занимаясь чем-нибудь, откуда следует вывод, что смысл не в конечной цели, а в процессе. А терминаторство акцентирует на цели, скажем: &ldquo;теперь я буду работать день и ночь и мне не нужны никакие мирские мелкие радости&rdquo;. Этим ты как бы говоришь: &ldquo;моя цель &ndash; перемотать свою жизнь в самый конец, умереть и тем самым отмучиться&rdquo;. Реализовать это в жизни не выйдет, потому что это не твоя цель, а просто лукавство.</p>

<h3>Признание самому себе</h3>

<p>В этом году также я выделил два типа вещей, которые мне нравятся, ради которых мне хотелось бы жить и не хотелось бы умирать: мне нравятся обычные материальные удовольствия, часто простые, не связанные с большими финансовыми тратами, но в остальное время мозг наоборот тянется к &ldquo;высокому&rdquo; &ndash; к творчеству людей в разных проявлениях. Если бы я нагло соврал сейчас, то сказал бы, что мне нравится только творчество.</p>

<p>Я думаю, что подавляющее большинство людей в этом похожи и я постоянно нахожу этому подтверждения.</p>

<h3>Информационная стрижка &ldquo;налысо&rdquo;</h3>

<p>Я заметил, что чем больше у тебя ума, тем более пагубное влияние интернет оказывает на твоё время и душевное спокойствие. Менее творчески развитым людям интернет доставляет меньше хлопот: они если и залипают в нём, то не так сильно, не с головой.</p>

<p>Я пришёл к однозначному выводу, что бесконтрольный интернет &ndash; зло для творческих людей. Почему? Интернет в том виде, в котором мы видим его &ndash; подстёгивает на многочисленные переключения контекста, что приводит в свою очередь к синдрому информационной заспамленности и параличу идей. А это портит настроение&hellip;на нормализацию которого уходит время.</p>

<p>Вот такая странная, невидимая на первый взгляд, дьявольская цепочка.</p>

<h3>Необходимая в жизни вещь &ndash; чтение одного источника</h3>

<p>Так как сейчас чтение уже не связано так сильно с книгами, а технологии добавили в этот мир разные способы чтения, то тут я акцентирую лишь на важности читать с одного источника, не переключаясь ни на какие больше.</p>

<p>Несколько необходимых и мегаважных свойств у книг:</p>

<ul>
<li>они успокаивают, то есть вводят тебя в обычное невозбужденное состояние</li>
<li>информация усваивается значительно лучше, за счет концентрации внимания на предмете</li>
<li>после чтения объективно чувствуешь себя позитивнее и как бы духовно насыщеннее</li>
<li>в целом, позволяют взрослому человеку хоть чуть чуть поддерживать в одном направлении свой &ldquo;вектор нормальности&rdquo;, который так сильно перекашивает сразу после наступления момента взросления</li>
</ul>


<h3>Остальные темы</h3>

<p>Пожалуй, в следующем посте расскажу про выводы относительно более конкретных вопросов, касаемо ведения дел: стратегии бизнеса, маркетинг, тренды и т.д</p>

<p><hr>
<strong> Писалось под музыку: </strong>
<object width="550" height="42"><param name="movie" value="http://embed.pleer.com/track?id=B4m3a4B4h6ttmB6dz"></param><embed src="http://embed.pleer.com/track?id=B4m3a4B4h6ttmB6dz" type="application/x-shockwave-flash" width="550" height="42"></embed></object> <br> <small>Прослушать или <a href="http://pleer.com/tracks/7749148vFV6" target="_blank">скачать Seether The Gift бесплатно</a> на <a href="http://pleer.com/" target="_blank">Простоплеер</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Правила эффективности]]></title>
    <link href="http://poetofcode.ru/blog/2014/07/21/pravila-effiektivnosti/"/>
    <updated>2014-07-21T18:06:44+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/07/21/pravila-effiektivnosti</id>
    <content type="html"><![CDATA[<p style="color: #333">Довольно большую часть своей жизни я посвятил поиску адекватных методов личной эффективности, а в этом посте я хочу собрать основные свои тезисы на эту тему с пояснениями.</p>


<h2>★ Загоняйся по теме</h2>

<p style="color: #666">Самые опасные люди - это сильно мотивированные люди. А мотивация возникает при появлении интереса к теме. Я часто вижу мотивированных быдланов. К примеру, многие из них рьяные защитники своего политического режима или своей веры, настолько упоротые, что вопрос о корректности и справедливости их позиции уже даже не ставится. Так или иначе эти люди обычно разбираются в теме своих загонов, а это полезно в достижении эффективности.</p>


<h2>★ Конкретизируй вопросы</h2>

<p style="color: #666">Это тоже очень важно. Единственный метод распутать сколь угодно сложную ситацию. В любой запутанной ситуации необходимо задавать себе вопросы и максимально конкретизировать их.</p>


<h2>★ Трать на работу мало времени</h2>

<p style="color: #666">Для творческого человека отдых полезен едва ли не больше, чем рабочее время. Именно в это время приходят самые гениальные и эффективные идеи. Отсюда же следует и другой вывод: на работу (как то - ответы на поставленные вопросы или проверки выдвинутых предположений) надо тратить меньше времени. Даже в случае, если цель не достижима, то гораздо лучше узнать об этом раньше.</p>


<h2>★ Выходи в интернет прицельно</h2>

<p style="color: #666">Серфинг в интернете должен быть максимально прицельным. Нужно всегда быть в курсе какую именно информацию нужно найти и зачем она нужна, не более. Побочный эффект этого пункта: нет необходимости оставаться в онлайне долго.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Рефлексивные телеги]]></title>
    <link href="http://poetofcode.ru/blog/2014/07/06/rieflieksivnyie-tielieghi/"/>
    <updated>2014-07-06T23:47:06+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/07/06/rieflieksivnyie-tielieghi</id>
    <content type="html"><![CDATA[<p>В этом посте я озвучу несколько мыслей, которые навещали меня в последнее время.</p>

<h3>Коллекция фэйлов</h3>

<p>Я &ndash; &ldquo;счастливый&rdquo; обладатель твореческого мышления. Творческие натуры обычно непрактичны. Во всем сомневаются, постоянно ищут себя, вобщем занимаются чем угодно, но вот результатов порой достигают с большим трудом и делают это оооочеееень долго. А в большинстве случаев у таких людей ничего не получается. И в результате неудачи скапливаются, а уверенность в себе угасает где-то в фоне.</p>

<p>Я вижу только одно решение этой проблемы &ndash; выбирать себе дела, которые с большой вероятностью можно выполнить, довести до конца. Легкодостижимые победы таким образом можно копить и раскручивать все сильнее внутренний маховик уверенности. К сожалению, именно творческие занятия для этого не годятся.</p>

<p>Ох уж эта правда&hellip;приходится признать, что разработка ПО &ndash; то, что я выбрал своей профессией, как раз является причиной большинства моих фэйлов.</p>

<h3>А это я делаю сам!</h3>

<p>Этот пункт про ответственность. Все слышали банальные наставления, что нужно быть отвественным человеком в жизни и в результате освобождать от проблем других людей. Но тут делается настолько неправильный акцент, что лучше бы вообще ничего не говорилось.</p>

<p>Ответственность &ndash; это эгоистическое качество человека, которое способно позволить ему жить по своему усмотрению. Нужно понимать, что выполнять основную часть дел по жизни самостоятельно необходимо для того, чтобы не потерять почву под ногами, чтобы другие люди не стали манипулировать тобой как куклой-марионеткой.</p>

<p>Делай как можно больше всего только сам и главное чувствуй это, мониторь это чувство. Как только это чувство угасает &ndash; делай что-нибудь, чтобы вновь вернуть контроль над своей жизнью.</p>

<h3>Интернет &ndash; гипермаркет для мозгов</h3>

<p>Как и фэст-фуд в больших количествах вреден для здоровья, так же и безлимитный интернет вреден для мозгов. Хорошо, слово интернет &ndash; слишком абстрактно, всё равно как алкоголь или курение. Я скажу так: если доступ к информации любого вида никак не ограничивается, то наступает отравление ей. Можно визуально представить себе разного рода видюшки, фоточки, статейки и аудиозаписи множества групп в виде, к примеру, овощей, кондитерских изделий, сырого мяса и шампиньонов, нафаршированных взбитыми сливками.</p>

<p>В общем, ясно одно, нужно ограничивать доступ к информации, не взирая на техническую возможность.</p>

<h3>Истина, ты не уйдешь от меня!</h3>

<p>Я часто теряю себя в водовороте жизни. А когда пытаюсь снова найти, то обращаю внимание на людей, которые якобы знают больше меня. Часто я жду от кого-либо или от чего-то (к примеру, от книги или статьи), что мне откроют истину. Я полагаю в этом случае, что существуют абсолюты, но я каким-то образом пока до них не дожил и к ним сам не пришел. Иногда мне кажется, что моя интуиция сигнализирует о том, что я на правильном пути и очень близок к разгадке вселенской тайны.</p>

<p>Но, к сожалению, я постоянно теряю эту хрупкую нить. На самом деле ничего этого нет. Нет никаких истин и никаких абсолютов. Все временно и все относительно. Можно заниматься одним или другим делом и нельзя точно сказать, какое из них более правильное.</p>

<p>Люди-шустряки-по-жизни быстро понимают, что ничего на самом деле не понятно, но вполне понятно, что можно разводить других и внушать им ощущение доверия к своему опыту(шустряков). Это суперменство, а так как супермена не существует, то и их тайных знаний нет в природе. Думайте сами, решайте сами и анализируйте эту жизнь своими глазами и не доверяйте никому.</p>

<hr>


<p>Писалось под музыку</p>

<object width="550" height="42"><param name="movie" value="http://embed.pleer.com/track?id=B3azasB4h6ttmB104a"></param><embed src="http://embed.pleer.com/track?id=B3azasB4h6ttmB104a" type="application/x-shockwave-flash" width="550" height="42"></embed></object>


<p> <br> <small>Прослушать или <a href="http://pleer.com/tracks/5551156varp" target="_blank">скачать Matchbox Twenty Parade бесплатно</a> на <a href="http://pleer.com/" target="_blank">Простоплеер</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Микс старых идей или стартаперство против страпёрства]]></title>
    <link href="http://poetofcode.ru/blog/2014/06/13/miks-starykh-idiei-ili-startapierstvo-protiv-strapiorstva/"/>
    <updated>2014-06-13T13:26:01+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/06/13/miks-starykh-idiei-ili-startapierstvo-protiv-strapiorstva</id>
    <content type="html"><![CDATA[<p>Многие успешные идеи рождаются благодаря слиянию нескольких известных ранее &ldquo;оригинальных&rdquo; идей. Даже крупные компании, к примеру, в IT-сфере &ldquo;грешат&rdquo; этим в своих продуктах. В последней версии iOS &ndash; восьмерке, многие функции подозрительно схожи с аналогами в Android (<a href="http://www.computerra.ru/100485/ios-8-features-inspired-by-google/">http://www.computerra.ru/100485/ios-8-features-inspired-by-google/</a>).</p>

<p>У меня также часто появляется соблазн скрестить мысленно какие-нибудь прикольные штуки и получить что-нибудь эдакое. Но совесть сигнализирует, что так делать нехорошо, что мол никакое это не изобретение, а банальное плагиаторство. Вопрос в том, как к этому относиться?</p>

<p>Я много об этом думал, но тем лучше, потому что на этот вопрос у меня выработалось чёткое мнение. Но раз уж речь зашла про микс идей, то и в этот раз я поступлю также и приплету сюда несколько другую тему: что лучше &ndash; заниматься стартапами или не париться и просто работать в конторе по найму? Под словом &ldquo;лучше&rdquo; тут я понимаю не какой-то один из показателей, скажем, деньги или интерес, а всё в целом.</p>

<p>Мысленно я всегда тяготею к занятиями своими собственными проектами и никому не нужно объяснять, что свобода лучше неволи и веселее. Работать же на кого-то нас заставляют правила игры &ndash; для жизни наобходимы деньги, поэтому занятие это безусловно принудительное, отсюда и возникает неприязнь к нему. Но есть и плюсы: влияние извне иногда бодрит, заставляет действовать быстрее и эффективнее, путем отбрасывания затяжных и не очень реалистиных, к примеру, идей.</p>

<p>Возвращаясь к первой теме о слиянии идей, я хотел бы сделать тут важный вывод: слияние не то что не является чем-то зазорным, а это единственный путь в развитии чего-либо. Мы неявно делаем это всегда, во всех случаях. Когда мы думаем о том, что решаем задачу оригинальным способом, то мы используем известные уже подходы и миксуем их с другими. Так рождается всё новое.</p>

<p>Поэтому сейчас я стал уже не так категоричен к работам, я понимаю, что в какой-то степени это даже может быть полезным для моих начинаний.</p>

<p><em>Оффтоп: песенка, под которую писался этот пост:</em></p>

<object width="550" height="42"><param name="movie" value="http://embed.pleer.com/track?id=B3r4rB4h6ttmBnj2"></param><embed src="http://embed.pleer.com/track?id=B3r4rB4h6ttmBnj2" type="application/x-shockwave-flash" width="550" height="42"></embed></object>


<p> <br> <small>Прослушать или <a href="http://pleer.com/tracks/175131kIWQ" target="_blank">скачать Creed Overcome бесплатно</a> на <a href="http://pleer.com/" target="_blank">Простоплеер</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Прототип интерфейса Dotted]]></title>
    <link href="http://poetofcode.ru/blog/2014/05/28/prototip-intierfieisa-dotted/"/>
    <updated>2014-05-28T13:07:11+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/05/28/prototip-intierfieisa-dotted</id>
    <content type="html"><![CDATA[<p><img src="http://poetofcode.ru/images/dotted/01.png" alt="Dotted 1" style="float: right; width: 350px; margin: 20px;"/>
Недавно пришла идея насчет мобильных интерфейсов с крупными элементами для не слишком раборчивых в технике и современных интерфейсах людей. Главное требование к такому интерфейсу: крупные заметные шрифты и прочие элементы управления.</p>

<p>Но как заставить дизайнера или программиста не использовать мелкие элементы в интерфейсе? Я подумал, что самый оптимальный путь &ndash; искусственно уменьшить разрешающую способность экрана. Так родилась идея мобильного интерфейса <strong>Dotted</strong>.</p>

<p>Кстати, выглядит довольно приятно :)</p>

<p>Под катом еще немного примеров и некоторые размышления по реализации.</p>

<p style="clear: both;"></p>




<!-- more -->


<h2>Произвольные изображения</h2>

<p>Что касается вывода каких-нибудь сложных изображений на экран: они могут строиться на основе обычных векторных или растровых изображений путем закрашивания точек, укладывающихся в контур исходного изображения. Именно так я получил логотип Apple:</p>

<p><p style="text-align: center">
<img src="http://poetofcode.ru/images/dotted/02.png" alt="Apple 2"/>
<p></p>

<h2>Шрифты</h2>

<p>А вот всевозможные шрифты (цифры, символы, иконки и т.д.) можно построить и просто так на глаз, чтобы добиться нужной эстетики. Кстати, неплохо было бы подумать над простеньким инструментом (на JS?), который бы позволял рисовать и сохранять шрифты для такого экрана. Вот как стильно выглядят часы и, к примеру, уведомление о новой смс-ке:</p>

<p><p style="text-align: center">
<img src="http://poetofcode.ru/images/dotted/03.png" alt="Apple 2"/>
<p></p>

<p>Этим можно не ограничиваться. Бегущий текст, анимация, простенькие игры &ndash; думаю там много чего еще можно придумать. Кстати, такой интерфейс мог бы быть актуальным не только в мобильнике, но и в новых девайсах &ldquo;носимой электроники&rdquo;, типа часов.</p>

<p>Возможно когда-нибудь я возьмусь реализовать что-то подобное.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Маленькие шаги и выигрыш в лотерею]]></title>
    <link href="http://poetofcode.ru/blog/2014/05/21/malien%27kiie-shaghi-i-vyighrysh-v-lotierieiu/"/>
    <updated>2014-05-21T19:35:20+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/05/21/malien&#8217;kiie-shaghi-i-vyighrysh-v-lotierieiu</id>
    <content type="html"><![CDATA[<p>Сегодняшняя заметка будет состоять из двух небольших частей. Сначала флуд, а потом немного про дела.</p>

<p><strong> #1.Флуд </strong>
Один умный и здоровый мужик, культурист Стюарт МакРоберт сказал как-то раз:</p>

<blockquote><p>Победа достигается лишь маленькими шагами, все что быстрее &ndash; выигрыш в лотерею</p></blockquote>

<p>Вообще-то это простое правило и оно кажется очевидным. Но я его постоянно нарушаю. Почему? Потому что для его соблюдения нужно быть постоянным в своих намерениях стремлениях и тому подобным начинаниям. А я не такой. И у многих видимо этого нет. Но это правило <strong>работает</strong>. Оно работает в спорте, обучении, программировании и во всех других деятельностях.</p>

<p>Вообще, культуристам с мозгами можно верить когда дело касается таких вот выводов: они доказали, что у них есть терпение и выдержка. Сразу без подготовки штангу в 180кг так просто не поднимешь. Так что этот чел не врет, я ему верю.</p>

<p><strong> #2.Дела </strong>
Мы тут с приятелем задумали сделать еще одно отличное приложение в вебе&hellip; Назовем его сайтом для удобства. Вообще-то у нас большие планы. Но мы из тех программистов, которые сами реализуют задуманное и мы понимаем, что это довольно тяжелый труд и куча потраченного времени.</p>

<p>Вкратце расскажу о тактике, выбранной для запила проекта на данный момент. В конкретно этом проекте было принято решения разработать собственную библиотеку для построения интерфейса.</p>

<p><strong> Ключевые идеи библиотеки: </strong></p>

<ul>
<li>Flat</li>
<li>Гибкая сетка</li>
<li>Отсутствие модальных компонентов</li>
<li>Единый слой для всех элементов (=> отсутствие параллакс-эффекта)</li>
</ul>


<p>Мне сейчас не очень понятно, как добиться гибкости сетки. Мне вообще не очень понятно как они строятся. Из этого следуют планы на ближайшее время: проработать материал по построению сеток. Было бы неплохо изучить материал и сверстать несколько тестовых экранов приложения. Скорее всего следующий пост будет об этом.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog == Weblog]]></title>
    <link href="http://poetofcode.ru/blog/2014/05/14/blog-equals-equals-weblog/"/>
    <updated>2014-05-14T23:06:38+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/05/14/blog-equals-equals-weblog</id>
    <content type="html"><![CDATA[<p>Я что-то давно не отписывался в блог. И скорее всего так случилось потому что к посту в блоге применяются слишком высокие требования. Он должен быть интересным, маленьким и в картинках.</p>

<p>Но мне зачастую не интересно читать вылизанные отшлифованные статейки про то как у всех всё хорошо получается. Блоги в последнее время превратились просто в сборник полезных советов и рецептов, как кулинарная книга для домохозяйки. А блог должен быть историей жизни автора. Автор не должен стесняться описывать свои мысли на текущий момент.</p>

<p><p style="text-align: center">
<img src="http://poetofcode.ru/images/freedom-quotes.jpg" alt="Freedom rocks!"/>
<p></p>

<p>Вобщем, в моём блоге будет теперь много воды и чуть-чуть полезного материала: <strong>всё как в жизни</strong>. Сейчас наступило такое время, когда люди стали не нужны друг другу, никому нет ни до кого дела. Но я подумал, что для таких публичных вещей как блог &ndash; это хорошее качество людей, потому что развязывает руки, можно писать что угодно и тебя никто не осудит, ведь всем же плевать :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обучение новым трюкам]]></title>
    <link href="http://poetofcode.ru/blog/2014/01/11/obuchieniie-novym-triukam/"/>
    <updated>2014-01-11T17:18:31+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/01/11/obuchieniie-novym-triukam</id>
    <content type="html"><![CDATA[<p>В этой заметке я хочу поговорить об одном из методов увеличения скорости и качества получения новых знаний.</p>

<p><img src="http://poetofcode.ru/images/its_never_too_late_to_learn.jpg" alt="Учиться никода не поздно" style="float: right; width: 350px; margin: 20px;" /></p>

<div>
Всем программистам в процессе работы приходится заниматься одним и тем же делом - изучать новый для себя материал перед написанием кода и решением конкретной задачи. Не всем это занятие приходится по душе, но с этим ничего не поделаешь, такова специфика работы. 

Практика показывает, что молодые программисты, недавно приступившие к работе, берутся за нее с гораздо большим энтузиазмом, чем их опытные коллеги. Это подчас приводит к тому, что программисты-новички через определенное непродолжительное время ознакомления с новой для них областью начинают разбираться в ней лучше, чем спецы с многолетним стажем.
</div>




<p style="clear: both;"></p>




<!-- more -->


<p>Во многом так получается еще и потому что область знаний, в которой мы работаем изменяется слишком быстро. А знания последних достижений в области ценится выше, чем опыт в устаревших подходах. К примеру, так дела обстоят в Web технологиях. За последние годы Web-разработка сильно изменилась: вышла масса новых серверных фрэймворком, а клиентская часть усложнилась настолько, что старые знания едва ли смогут чем-то помочь.</p>

<p>Специалист, освоивший JavaScript фрэймворк AngularJS сможет реализовать гораздо более сложные клиентские интерфейсы, чем профи в JQuery за меньшее время. Семантическая разметка HTML5 и богатые возможности верстки с помощью CSS3 помогут программисту в написании сайтов, ориентированных для большего числа устройств, а также обеспечат лучшее место в поиске.</p>

<p>Очевидно, что нам всегда нужно поддерживать свои знания в актуальном состоянии. Проблема тут в том, что поддерживать мотивацию к изучению нового становится всё труднее со временем. На первый взгляд кажется, что технологий слишком много, а обновления происходят слишком часто. Конечно доля правды в этом есть. Но как часто это бывает в основном проблема лежит на уровне психологии.</p>

<p>Для себя я открыл некий способ самообмана. Каждый раз когда мне приходится изучать что-то новое &ndash; я просто &ldquo;обнуляю счётчик&rdquo;, то есть представляю будто бы делаю это в первый раз. В какой-то степени это позволяет всятряхнуться, посмотреть на вещи (пусть отчасти знакомые) под другим углом. По сути я становлюсь тем новичком, который рвётся в бой с новыми силами на штурм новой технологии, не ведая (пока что) о том, что его ждёт целая череда подводных камней, ограничений и прочих трудностей.</p>

<p>Смысл в том, чтобы освободить на какое-то время свой разум от &ldquo;груза&rdquo; прошлого опыта. В конце концов иногда это помогает просто перебороть свою лень и открыть статью/книгу/исходники. На какое-то время это работает, ну а дальше поддерживать интерес уже значительно проще.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Красивый слайдер на JQuery своими руками]]></title>
    <link href="http://poetofcode.ru/blog/2013/07/15/krasivyi-slaidier-na-jquery-svoimi-rukami/"/>
    <updated>2013-07-15T16:54:28+04:00</updated>
    <id>http://poetofcode.ru/blog/2013/07/15/krasivyi-slaidier-na-jquery-svoimi-rukami</id>
    <content type="html"><![CDATA[<script src="http://poetofcode.ru/assets/jsimpression/jsImpression.js" type="text/javascript"></script>


<p><link href="http://poetofcode.ru/stylesheets/jsimpression/jsImpression.css" rel="stylesheet" type="text/css" /></p>

<p>В продолжение <a href="http://poetofcode.ru/blog/2013/07/09/kak-napisat-sobstviennyi-plaghin-jquery-pierievod/">предыдущего поста</a> про написание собственного плагина, решил сделать свой простенький, но в то же время симпатичный jQuery-плагин. Выбрал для эксперимента тему слайдеров.</p>

<!-- more -->


<p>Вот что получилось в итоге:</p>

<div id="gallery" style="width: 100%; height: 390px; text-align: center;">
    <img class="active" src="http://poetofcode.ru/images/jsimpression/1.jpg" style="display: block;"/>
    <img src="http://poetofcode.ru/images/jsimpression/2.jpg" />
    <img src="http://poetofcode.ru/images/jsimpression/3.jpg" />
</div>


<p>Слишком просто? Да&hellip;но ведь и код получился легкий и понятный! А это значит, что можно модернизировать его под свои нужды при необходимости.</p>

<p>Для использования, достаточно подключить в свой код HTML два файлика &ndash; js и css соответственно, а также применить плагин к вашему контейнеру с изображениями. Вот пример.</p>

<p>Разметка:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;gallery&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span> <span class="na">src=</span><span class="s">&quot;img/1.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;img/2.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;img/3.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Подключение плагина:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;jsImpression.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;jsImpression.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Привязка плагина к контейнеру</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#gallery&quot;</span><span class="p">).</span><span class="nx">jsImpression</span><span class="p">({</span><span class="nx">interval</span><span class="o">:</span> <span class="mi">3000</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Можно задавать свой интервал, а можно и опустить этот параметр, по-умолчанию он равен 6 секундам.</p>

<p>Удачи в написании собственных плагинов!</p>

<p>Адрес проекта на <strong>bitbucket.org</strong> &ndash; <a href="https://bitbucket.org/freeproger/jsimpression">тут</a>.</p>

<script>
    $(document).ready(function(){
            $("#gallery").jsImpression({interval: 3000});
    });
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как написать собственный плагин jQuery [перевод]]]></title>
    <link href="http://poetofcode.ru/blog/2013/07/09/kak-napisat-sobstviennyi-plaghin-jquery-pierievod/"/>
    <updated>2013-07-09T23:57:17+04:00</updated>
    <id>http://poetofcode.ru/blog/2013/07/09/kak-napisat-sobstviennyi-plaghin-jquery-pierievod</id>
    <content type="html"><![CDATA[<p>
    <b>Если вы никогда ранее не писали плагины для jQuery - не беда, чтобы сделать это требуется всего лишь несколько простых шагов. Следуя инструкциям, вы можете разработать плагин, который выглядит как нативный jQuery-метод.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Зачем создавать jQuery плагин?</span></b></p>


<p>
    <b>Вот список причин, для которых вам может потребоваться написать свой собственный плагин:</span></b></p>


<ul style="margin-top: 0pt; margin-bottom: 0pt;">
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Повторное использование снова и снова</span></b></li>
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Инкапсуляция</span></b></li>
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Простота использования</span></b></li>
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Поддержка цепочки вызовов</span></b></li>
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Возможность широкого распространения</span></b></li>
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Предотвращение конфликтов имен</span></b></li>
</ul>




<!-- more -->




<p>
    <br />
    <b>Из этого списка, я думаю, что одним из самых весомых причин является инкапсуляция вашего кода для повторного использования в вашем проекте. Плагины относительно легко писать, так что существует весьма немного причин удержать вас от того, чтоб сделать код более чистым и лекгим в поддерживании. В какой-то момент вы возможно захотите распространять свой плагин, что также неплохо, но организация вашего кода имеет наибольшее значение.</span><br />
    <br />
    <span>Если ни одна из этих причин не кажется вам весомой, то просто знайте, что написание собственных плагинов jQuery, а также их использование (и повторное использование) - это увлекательный и веселый процесс.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Как работает плагин jQuery</span></b></p>


<p>
    <b>Если говорить простыми словами, основные концепции jQuery плагина включают в себя следующее:</span></b></p>


<ul style="margin-top: 0pt; margin-bottom: 0pt;">
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Передача набора DOM элементов из jQuery выборки</span></b></li>
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Манипулирование DOM элементами</span></b></li>
    <li dir="ltr" style="list-style-type: disc; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Возврат объекта jQuery в цепочке вызовов</span></b></li>
</ul>


<p>
    <b>Перед тем как приступить к знакомству с этими разделами, вы должны создать основу для своего плагина.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Описание плагина</span></b></p>


<p>
    <b>Вот простой пример, с которого вы можете начать описание своего jQuery плагина.</span></b></p>


<pre class="prettyprint lang-js prettyprinted" style="font-family:monospace;">
$.fn.watermark = function(options) { /* ... */ } &nbsp;&nbsp;
//Ссылка на jQuery.prototype.watermark = function(options) { /* ... */ }
</pre>


<p>
    <b>Если вы взглянете на </span><a href="http://code.jquery.com/jquery-latest.js"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">исходный код jQuery</span></a><span>, то заметите, что </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$.fn </span><span style="font-size: 15px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;">являете просто ссылкой на</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;"> </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">jQuery.prototype.</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;"> </span><span style="font-size: 15px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;">В предыдущем коде написано одно и то же, но использование короткой записи выглядит более предпочтительным.</span></b><br />
    <br />
    <b>Следующая проблема, которая встает перед нами - это запись $, которая может вызвать конфликт при использовании &nbsp;других библиотек JavaScript, которые вы возможно будете использовать. Одним из наиболее простых способов обойти эту проблему без потери в краткости кода и использовании jQuery вместо $ - это &nbsp;обернуть код вашего jQuery плагина в самовызываемую(self-invoking) анонимную функцию.</span><br />
    <br />
    <span>Чего?! Что это еще за самовызываемая анонимная функция? Ничего страшного, по сути, это функция без имени, которая вызывается немедленно. Таким образом, вы можете безопасно вызывать функцию с аргументом jQuery и $ в качестве принимающего параметра.</span><br />
    <br />
    <span>Наш модифицированный jQuery плагин после обертывания в самовызываемую анонимную функцию будет выглядеть так:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
(function($){ 
  $.fn.watermark = function(options) { ... } 
})(jQuery);
</pre>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Параметры плагина</span></b></p>


<p>
    <b>Наш следующий шаг - добавление некоторых параметров в плагин. Вы можете сделать это различными способами, но самым распространенным из тех, которые вы можете встретить, является передача одного параметра, который содержит все ваши опции внутри себя. Если вы последуете этому способу, то код будет выглядеть следующим образом:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
$(&#39;#helloWorld&#39;).watermark({
  text: &#39;City&#39;, 
  class: &#39;watermark&#39;
});
</pre>


<p>
    <b>Вместо того, чтобы просто сделать что-то вроде: </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">watermark(&quot;City&quot;, &quot;watermark&quot;), </span><span style="font-size: 15px; font-family: Arial; vertical-align: baseline; white-space: pre-wrap;">такая запись является самодокументируемой, определяя &ldquo;City&rdquo; в качестве text и &ldquo;watermark&rdquo; в качестве class.</span></b><br />
    <br />
    <b>Вы также должны позаботиться о наборе публичных открытых параметров плагина на случай, если пользователь не решит передавать все опции, которые необходимы для работы. Это обеспечивает поведение по-умолчанию, а также дает возможность пользователям перекрыть только те значения, которые они сочтут нужным.</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
$.fn.watermark.defaultOptions = {
  class: &#39;watermark&#39;,
  text: &#39;Введите текст&#39;
}
</pre>


<p>
    <b>Определив один раз значения по-умолчанию, вы можете по необходимости переопределить их снаружи jQuery плагина.</span></b><br />
    <br />
    <b>Если я хочу переопределить какое-либо значение для всех будущих экземпляров плагина, то я пишу код наподобие этого:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
$.fn.watermark.defaultOptions.class = &quot;watermark2&quot;;
$(&#39;#helloWorld&#39;).watermark();
$(&#39;#goodbyeWorld&#39;).watermark();
</pre>


<p>
    <b>Этот код использует класс </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;">watermark2</span><span> вместо </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;">watermark</span><span>, определенный в параметрах плагина по-умолчанию. Переопределенный класс использован тут в двух местах вызова плагина.</span></b><br />
    <br />
    <b>Теперь, когда мы имеем секцию определения параметров по-умолчанию, мы должны сфокусировать внимание на объединении параметров, переданных в jQuery плагин и опций по-умолчанию. Это довольно таки просто и может быть сделано с помощью одного их методов jQuery. Вот пример:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
(function($) {
 
  $.fn.watermark = function(options) {  
     options = $.extend({}, $.fn.watermark.defaultOptions, options);     
     return this;
  }
})(jQuery);
</pre>


<p>
    <b>В jQuery есть метод extend, который объединяет содержимое двух или более объектов и сохраняет результат в первом из них. В приведенном выше фрагменте кода мы объединили </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$.fn.watermark.defaultOptions</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;"> </span><span>и</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;"> </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">options.</span><span> Первый объект является пустым, потому что мы не хотим изменять параметры по-умолчанию для будущих экземпляров плагина.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Обход jQuery выборки</span></b></p>


<p>
    <b>На данный момент наш плагин не делает ничего. Но теперь, когда &nbsp;у нас есть параметры по-умолчанию, объединенные с переданными параметрами, давайте соседоточимся на настройке нашего плагина для манипулирования DOM-элементами, выбранными при помощи jQuery.</span><br />
    <br />
    <span>Вполне вероятно, что селектор, используемый при инициализации плагина соответствует нулю, одному или большему числу DOM элементов:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
this.each(function() {  
  var element = $(this);  
  // Манипулируйте с элементом в этом месте...
}
</pre>


<p>
    <b>Ключевое слово this внутри метода each представляет один из DOM элементов из выборки. Показанный здесь код оборачивает DOM элемент в объект jQuery и сохраняет его для дальнейших манипуляций.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Публичные методы</span></b></p>


<p>
    <b>Другая распространенная техника состоит в открытии одного или нескольких методов, которые могут быть вызваны за пределами плагина. Чтобы определить публичные методы вы можете воспользоваться следующим кодом:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
(function($) {  
 $.fn.watermark = function(options) {  
 
   options = $.extend({}, $.fn.watermark.defaultOptions, options);
   
   this.each(function() {
     var element = $(this);
     // Манипулируйте элементом в этом месте...        
   });        
   
   return this;
 };
 
 // Публичная функция
 $.fn.watermark.greet = function(name) {
   console.log(Привет, &#39; + name + &#39;, добро пожаловать 
           на Script Junkies!&#39;);
 };
 
 $.fn.watermark.defaultOptions = {
   class: &#39;watermark&#39;,
   text: &#39;Введите текст&#39;
 }
})(jQuery);</pre>


<p>
    <b>Есть альтернативные способы реализовать публичные методы. Обычно подход, показанный выше, критикуют за то, что в нем используется больше чем одно имя Прототипа (Prototype) jQuery (</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$.fn.watermark</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;"> </span><span>для плагина и</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;"> </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$.fn.watermark.greet</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;"> </span><span>для публичного метода) и это засоряет пространство имен. Желательно использовать только одно имя Прототипа jQuery.</span></b><br />
    <br />
    <b>Вы можете увидеть, как некоторые авторы плагинов создают модуль с тем же названием что и плагин jQuery и инстанцируют объект для каждого DOM элемента. Затем объект сохраняется в виде элемента данных в каждом DOM элементе для вызова публичных методов в будущем.</span><br />
    <br />
    <span>Я переписал предыдущий пример, который загрезняет пространство имен jQuery ($.fn) двумя публичными методами и теперь использую вариант модуля, который определяет только один метод пространства имен jQuery. Вот измененный пример:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
(function($) {
 
  $.watermark = function(element, options) {
     this.options = {};
      
     element.data(&#39;watermark&#39;, this);
     
     this.init = function(element, options) {         
        this.options = $.extend({}, $.watermark.defaultOptions, options); 
     
        // Манипулируйте элементом...       
     };
     
     // Публичная функция
     this.greet = function(name) {
        console.log(&#39;Привет, &#39; + name + &#39;, добро пожаловать 
            на Script Junkies!&#39;);
     };
     
     this.init(element, options);
  };
 
  $.fn.watermark = function(options) { // Используется только одно имя $.fn  
     return this.each(function() {
        (new $.watermark($(this), options));              
     });        
  };
   
  $.watermark.defaultOptions = {
     class: &#39;watermark&#39;,
     text: &#39;Введите текст&#39;
  }
})(jQuery);
</pre>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">Замечание:</span><span> я использую образец кода Модуля только в показательных целях для этого руководства. Я делаю это для того чтобы не засорять публичное пространство имен </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">jQuery.fn.</span><span> </span></b><br />
    <br />
    <b>Теперь, вызов публичного метода выглядит не так органично, как в предыдущем примере, засоряющем пространство имен jQuery. Вместо этого вы вызываете публичнй метод объекта </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$.watermark</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;">, </span><span>который сохранен в вашем DOM элементе с помощью метода </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">data</span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;">.</span><br />
    <span>Вот пример:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
// Вместо этого...
$.fn.watermark.greet(&#39;Elijah&#39;); 
$(&#39;#firstName&#39;).watermark.greet(&#39;Elijah&#39;);  
 
// Теперь используйте...
$(&#39;#firstName&#39;).data(&#39;watermark&#39;).greet(&#39;Elijah&#39;);

</pre>


<p>
    <b>Вы можете подумать, что это не вам не подходит. Хорошо, есть и другая частоиспользуемая техника в стиле вызова публичных методов jQuery UI. В этой технике используется первый параметр плагина для вызова публичного метода. Следующи фрагмент кода демонстрирует вызов публичных методов виджета tabs:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
$(&#39;#tabs&#39;).tabs();
$(&#39;#tabs&#39;).tabs(&#39;add&#39;, &#39;./NewPage.html&#39;, &#39;New Tab&#39;);
</pre>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); vertical-align: baseline; white-space: pre-wrap;">Чтобы использовать такой тип синтаксиса для вызова публичных методов, вы можете использовать jQuery UI Widget Factory (Фабрику Виджетов), которую я вкратце затрону далее в этой статье.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Приватные функции</span></b></p>


<p>
    <b>В тех случаях, когда вы не хотите делать открытым весь ваш функционал, есть способы сделать ваши методы приватными. Основная техника - это объявление метода внутри самовызываемой анонимной функции, как показано тут:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
(function($) {
  $.watermark = function(element, options) {
     this.options = {};
      
     element.data(&#39;watermark&#39;, this);
     
     this.init = function(element, options) {         
           this.options = $.extend({}, $.watermark.defaultOptions, options); 
 
        // Вызов приватной функции
        updateElement(element, this.options);
     };
           
     // Публичная функция
     this.greet = function(name) {
        console.log(Привет, &#39; + name + &#39;, доро пожаловать 
                  на Script Junkies!&#39;);
     };
 
     this.init(element, options);
  };
 
 $.fn.watermark = function(options) {                   
   return this.each(function() {
      (new $.watermark($(this), options));              
   });        
 };
 
 // Приватная функция
 function updateElement(element, options) {
   // Манипулируйте элементом тут...   
 };
 
 $.watermark.defaultOptions = {
   class: &#39;watermark&#39;,
   text: &#39;Введите текст&#39;
 }
 
})(jQuery);</pre>


<p>
    <b>В зависимости от уровня юнит-тестирования, который вы захотите использовать вы можете захотеть сделать публичными больше ваших методов, что даст вам возможность протестировать больше методов по отдельности. В конце концов, это ваш выбор, но техника, которую я проиллюстрировал, должна помочь вам структурировать ваш код.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Поддержка метаданных плагина</span></b></p>


<p>
    <b>В настоящее время мы определили публичные параметры по-умолчанию, которые влияют на все будущие экземпляры плагинов. Мы также передавали произвольные опции в плагин, которые смешивались с параметрами по-умолчанию.</span><br />
    <br />
    <span>Если вы хотите, чтоб ваш плагин jQuery обладал настоящей гибкостью, то вы можете включить </span><a href="http://plugins.jquery.com/project/metadata"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">плагин Metadata</span></a><span> для переопределения параметров по-умолчанию на основе DOM-элемента. Плагин Metadata добавляет расширенную информацию в ваш DOM-элемент путем добавления JSON записи внутрь одного из атрибута вашего элемента. Распространенной техникой является использование атрибута class (который я покажу), но вы можете также использовать атрибут data, как показано здесь:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
&lt;input id=&quot;state&quot; type=&quot;text&quot; class=&quot;someclass {text: &#39;State&#39;}&quot; /&gt;
&lt;input id=&quot;zip&quot; type=&quot;text&quot; data=&quot;{text: &#39;Zip&#39;, class: &#39;watermark&#39;}&quot; /&gt;
</pre>


<p>
    <b>Теперь давайте обновим наш jQuery плагин и добавим поддержку метаданных. Следующий код сначала проверяет наличие плагина Metadata. Если да, то в опции добавляются все параметры, переданные в метаданных элемента.</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
this.init = function(element, options) {         
  this.options = $.extend({}, $.watermark.defaultOptions, options);
 
  // Если метаданные плагина существуют, то добавляется информация
  // из метаданных в параметры
  this.options = $.metadata ? 
     $.extend({}, this.options, element.metadata()) : 
     this.options;
 
  updateElement(element, this.options);
};
</pre>


<p>
    <b>Теперь вы можете использовать следующий синтаксис, чтобы переопределить параметры по-умолчанию или параметры переданные плагину jQuery.</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
&lt;input id=&quot;helloWorld&quot; 
  type=&quot;text&quot; 
  class=&quot;{text: &#39;Watermark присутствует здесь вместо аргумента плагина&#39;, 
     class: &#39;specialWatermarkClass&#39;}&quot; /&gt;
</pre>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Реализация цепочки вызовов</span></b></p>


<p>
    <b>В большинстве jQuery функций и плагинов желательно возвращать объект jQuery, чтобы обеспечить работу вызовов методов по цепочке. Реализовать это довольно просто. Наиболее распространенный способ сделать это - возвратить метод </span><span style="font-size: 13px; font-family: Verdana; color: rgb(51, 51, 51); font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$.each, </span><span>как показано тут:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
$.fn.watermark = function(options) {                   
  return this.each(function() { // Поддержка цепочки вызовов
     (new $.watermark($(this), options));              
  });        
};
</pre>


<p>
    <b>Это незначительно изменение в вашем плагине, позволяет вам вызывать плагин в следующей форме:</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
$(&#39;#helloWorld&#39;).watermark({text: &#39;Last Name&#39;}).css({
  border-color: &#39;red&#39;;
});
</pre>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Модульное тестирование</span></b></p>


<p>
    <b>Было бы не лишним написать модульные тесты для вашего плагина, чтобы обеспечить первозданное качество и быть уверенным в его работоспособности, а также немедленно выявлять критические ошибки в случае внесения новой функциональности или при изменении &nbsp;существующего кода.</span><br />
    <br />
    <span>Я не буду вдаваться в подробности при описании </span><a href="http://docs.jquery.com/QUnit"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">QUnit</span></a><span>. Если вы хотите узнать больше о том, как начать работу с ним, то вы можете получить подробную документацию на сайте jQuery.com и там же скачать необходимые файлы.</span><br />
    <br />
    <span>Чтобы протестировать функциональность нашего плагина watermark, я написал несколько модульных тестов. Для краткости, я приведу только один модуль и два юнит-теста в этой статье. Если вам интересно просмотреть или самому запустить другие тесты, то их исходники доступны в моем </span><a href="http://github.com/elijahmanor/jWatermark"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">репозитории jWatermark на GitHub&#39;е</span></a><span>.</span><br />
    <br />
    <span>Следующий код описывает главный модуль, который я использую для тестирования нашего плагина watermark. Поскольку мы хотим сделать наши тесты автономными и воспроизводимыми, я определил методы setup и teardown, которые вызываются перед и после каждым юнит тестом соответственно, таким образом, наше окружение остается одинаковым для каждого теста.</span><br />
    <br />
    <span>Мой метод setup сбрасывает параметры по-умолчанию к значениям, с которыми плагин был инициализирован при первом инстанцировании. Причина, по которой я делаю это, заключается в том, что некоторые мои юнит тесты будут перезаписывать параметры по-умолчанию, но я не хочу, чтоб это повлияло на другие тесты.</span><br />
    <br />
    <span>Я определил пустой div, чтобы инициализировать плагин watermark. Метод teardown в основном очищает содержимое тестового элемента для использования в следующем тесте.</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
var playGroundSelector = &quot;#qunit-playground&quot;;
module(&quot;Watermark jQuery Plugin&quot;, {
 setup: function() {
   $.watermark.defaultOptions = {
     class: &#39;watermark&#39;,
     text: &#39;Введите текст здесь&#39;
   }    
 },
 teardown: function() {
   $(playGroundSelector).empty();
 }
});
</pre>


<p>
    <b>Юнит тесты обычно разбивают на три части:</span></b></p>


<ol style="margin-top: 0pt; margin-bottom: 0pt;">
    <li dir="ltr" style="list-style-type: decimal; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">секция настройки, в которой устанавливаются все необходимые части для запуска теста</span></b></li>
    <li dir="ltr" style="list-style-type: decimal; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">секция действия, в которой выполняется сам интересующий нас тест</span></b></li>
    <li dir="ltr" style="list-style-type: decimal; font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">
        <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">секция проверки, которая проверяет результат выполнения теста</span></b></li>
</ol>


<p>
    <b>Поскольку некоторые из вас могут быть не знакомы с юнит-тестами, я буду сопровождать эти разделы комментариями.</span></b><br />
    <br />
    <b>Мой первый юнит тест очень прост. Все что он делает - просто убеждается, что плагин watermark, инстанцированный без аргументов имеет парметры class и text, совпадающие с параметрами по-умолчанию.</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
test(&quot;Watermark Без Параметров&quot;, function() {
 // Настройка
 var testBox =
     $(&quot;&lt;input id=&#39;testBox&#39; type=&#39;text&#39; /&gt;&quot;)
         .appendTo(playGroundSelector);
 
 // Действия
 testBox.watermark();
 
 // Проверка
 expect(2);
 deepEqual(testBox.attr(&quot;class&quot;), &quot;watermark&quot;, 
     &quot;Класс должен быть определен&quot;);
 deepEqual(testBox.val(), &quot;Введите текст здесь &quot;, 
     &quot;Значение watermark должно быть задано по-умолчанию&quot;);
});
</pre>


<p>
    <b>Вот другой пример юнит теста, который обеспечивает, что watermark очищается, когда текстовое поле получает фокус.</span></b></p>


<pre class="prettyprint lang-js prettyprinted">
test(&quot;Watermark Должен Очищаться При Получении Фокуса&quot;, function() {
 // Настройка
 var testBox =
     $(&quot;&lt;input id=&#39;testBox&#39; type=&#39;text&#39; /&gt;&quot;)
         .appendTo(playGroundSelector);
 
 // Действия
 testBox.watermark({
   text: &#39;Введите текст здесь 4&#39;,
   class: &#39;watermark5&#39;
 }).focus();
 
 // Проверка
 expect(2);
 ok(!testBox.hasClass(&quot;watermark5&quot;), &quot;Не должен иметь класс watermark5&quot;);
 deepEqual(testBox.val(), &quot;&quot;, &quot;Значение Watermark должно быть пустым&quot;);
});
</pre>


<p>
    <b>Как я упоминал ранее, вы можете написать другие тесты, но я хотел показать только пару тестов, чтобы дать &nbsp;вам представление о том, что вы можете сделать. И снова я призываю вас писать юнит тесты для вашего кода jQuery. Они помогут сохранить модульность вашего кода, помогут сохранить качество во время рефакторинга и позволят вам расширять ваш код с уверенностью, что предыдущий код не был нарушен.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Виджеты jQuery UI</span></b></p>


<p>
    <b>Как только вы научитесь написанию собственных плагинов jQuery возможно вы захотите освоить написание собственных </span><a href="http://docs.jquery.com/UI_Developer_Guide#The_widget_factory"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">виджетов jQuery</span></a><span>. Главное отличие между ними состоит в том, что виджет поддерживает состояние, в то время как обычный плагин обычно нет.</span><br />
    <br />
    <span>Команда jQuery UI создала Widget Factory (Фабрику Виджетов), чтобы сделать написание вашего виджета быстрым и простым. Великолепный ресурс для ускорения создания виджета jQuery UI - это недавний пост блога </span><a href="http://twitter.com/danwellman"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Dan Wellman</span><span style="font-size: 15px; font-family: Arial; color: rgb(0, 0, 0); background-color: transparent; text-decoration: initial; vertical-align: baseline; white-space: pre-wrap;"> </span></a><span>озаглавленная как </span><a href="http://net.tutsplus.com/tutorials/javascript-ajax/coding-your-first-jquery-ui-plugin/?utm_source=feedburner"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Написание вашего первого плагина jQuery UI</span></a><span>. На самом деле, все существующие виджеты UI JQuery используют Widget Factory, таким образом, они также являются отличным источником примеров для исследования и изучения.</span></b></p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Заключение</span></b></p>


<p>
    <b>Я надеюсь, что эта статья позволила вам хорошо прочувствовать основные этапы создания подходящего для многоразового применения плагина jQuery. Если вы ищете шаблон, чтобы сразу приступить к созданию плагина jQuery, то я предложил бы использовать </span><a href="http://starter.pixelgraphics.us/"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Starter: Jumpstart Your jQuery Plugin template</span></a><span>. Он содержит много понятий, которые я описал в этой статье, и может предоставить вам хорошую отправную точку для создания собственного плагина JQuery.</span><br />
    <br />
    <span>Если вы заинтересованы в дальнейшем изучении jQuery, то вы можете </span><a href="http://twitter.com/elijahmanor"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">подписаться на мой Твиттер</span></a><span> для получение свежих новостей в мире jQuery. Также проверяйте мой блог на наличие моих ежедневных обзоров </span><a href="http://webdevtweets.blogspot.com/"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">Tech Tweets</span></a><span>, которые содержат многочисленные ссылки о jQuery для помощи в вашем учебном процессе.</span></b></p>


<p>
    &nbsp;</p>


<p>
    <b id="internal-source-marker_0.7454807010944933" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;"><em><span>Подготовлено по материалам источника: </span></em><a href="http://msdn.microsoft.com/en-us/magazine/ff608209.aspx"><span style="font-size: 15px; font-family: Arial; color: rgb(17, 85, 204); background-color: transparent; vertical-align: baseline; white-space: pre-wrap;">http://msdn.microsoft.com/en-us/magazine/ff608209.aspx</span></a></b></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[В последний раз про .gitignore]]></title>
    <link href="http://poetofcode.ru/blog/2013/02/05/v-posliednii-raz-pro-gitignore/"/>
    <updated>2013-02-05T22:28:24+04:00</updated>
    <id>http://poetofcode.ru/blog/2013/02/05/v-posliednii-raz-pro-gitignore</id>
    <content type="html"><![CDATA[<p>Довольно туманным для меня вопросом при переходе с SVN на Git стал вопрос об игнорировании ненужных файлов в репозитории. Поэтому оставлю тут запись, чтоб самому не забыть.</p>

<p>На самом деле все не слишком сложно и доступно в странице мануала по gitignore (<em>man gitignore</em> либо <em>git help ignore</em>)</p>

<!-- more -->


<p>Есть всего 3 варианта, которые могут возникнуть с игнорированием файлов в Git:</p>

<p>Файлы еще не добавлены под контроль версий (untracked).
В этом случае и нужен файл <em>.gitignore</em>.
Пример содержимого файла:</p>

<pre><code>/application/cache/*
/application/logs/*
</code></pre>

<p>Если теперь закоммитить <em>.gitignore</em>, то содержимое этих папок (пример из файловой структуры Kohana) не будет больше интересовать git. Можете убедиться в этом, выполнив команду <em>git status</em>
Файлы уже добавлены под контроль версий (tracked).
Для этого случая предусмотрена команда:</p>

<pre><code>$ git update-index --assume-unchanged ./filename.txt
</code></pre>

<p>Теперь новые изменения в файле <em>filename.txt</em> будут игнорироваться git&#8217;ом. Для того чтобы заставить git вновь реагировать на изменения существует обратная команда:</p>

<pre><code>$ git update-index --no-assume-unchanged ./filename.txt
</code></pre>

<p>Если файлы по ошибке попали под контроль, но быть там не должны (логи, кэш и прочие временные файлы), то удалить их оттуда можно командой:</p>

<pre><code>$ git rm --cached ./log.txt
</code></pre>

<p>Также есть хорошие примеры в самом мануале по команде.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Устранение проблемы Push'а на Heroku]]></title>
    <link href="http://poetofcode.ru/blog/2013/02/04/ustranieniie-probliemy-pusha-na-heroku/"/>
    <updated>2013-02-04T21:44:19+04:00</updated>
    <id>http://poetofcode.ru/blog/2013/02/04/ustranieniie-probliemy-pusha-na-heroku</id>
    <content type="html"><![CDATA[<p>Недавно столкнулся со странной проблемой при попытке сделать <em>push</em> на облачный сервис <a href="https://www.heroku.com">Heroku</a>:</p>

<pre>
$ git push heroku master
Agent admitted failure to sign using the key.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</pre>




<!-- more -->




<p>
    При этом все ключи были, как и положено, сгенерированы и добавлены в heroku, соответственно, командами:</p>




<pre>
$ ssh-keygen -t rsa -C "poetinthecode@gmail.com"
$ heroku keys:add
</pre>




<p>
    В итоге решение было найдено после часового гугления и заключается оно в правильной настройке переменной окружения <em>SSH_AUTH_SOCK</em>:</p>




<pre>
$ SSH_AUTH_SOCK=0
</pre>


<p>
    Вот после этой странной команды, наконец-то можно сделать Push:</p>


<pre>
$ git push heroku master
</pre>


<p>
    Спасибо <a href="http://stackoverflow.com/a/6075594/1655801">StackOverflow</a>, как всегда выручил!</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обзор бюджетного смартфона Highscreen Spark]]></title>
    <link href="http://poetofcode.ru/blog/2013/01/10/obzor-biudzhietnogho-smartfona-highscreen-spark/"/>
    <updated>2013-01-10T23:09:58+04:00</updated>
    <id>http://poetofcode.ru/blog/2013/01/10/obzor-biudzhietnogho-smartfona-highscreen-spark</id>
    <content type="html"><![CDATA[<p style="float: right;">
    <img alt="Highscreen Spark" src="http://poetofcode.ru/images/highscreen_spark.jpg" style="width: 400px; height: 400px;"></p>


<p>Несколько последних месяцев я присматривался к недорогим моделям
андрофонов российского бренда Highscreen. Да-да, всё верно, Highscreen &ndash;
 это торговая марка, права на которую принадлежат российской компании
&ldquo;Вобис Компьютер&rdquo; (<a href="http://ru.wikipedia.org/wiki/Highscreen">Wikipedia</a>).</p></p>

<p>Выбор пал на самую бюджетную модель из доступных в продаже &ndash; <a href="http://highscreen.org/products/communicators/highscreen-spark/">Highscreen Spark</a>.</p>

<p>Телефон подкупил своей дешевизной и обошелся мне в смешные для
устройства с такими характеристиками деньги &ndash; всего лишь 3990р. На
всякий случай &ndash; <a href="http://market.yandex.ru/model.xml?modelid=9366103&amp;hid=91491">ссылка на Яндекс.Маркет</a></p></p>

<!-- more -->




<p>
    <strong>Официально заявленные характеристики смартфона:</strong></p>


<p>
    Платформа:<b> Android 4</b><br>
    Дисплей:<b> 4.0&#8221; 480 X 800 WVGA</b><br>
    Процессор:<b> Qualcomm 8225 1 ГГц (двухъядерный)</b><br>
    Размер оперативной памяти:<b> 512 МБ</b><br>
    Размер постоянной памяти:<b> 4 ГБ</b><br>
    Габариты: <b>124*65*12.6 мм</b><br>
    Вес:<b> 130 г</b><br>
    Аккумулятор: <b>Li-Ion 1500 мА/ч</b><br>
    Камера:<b> 0.3 Мп + 5 Мп&nbsp;</b><br>
    <b>Wi-Fi®: IEEE 802.11 b/g/n</b><br>
    <b>FM-радио</b><br>
    Bluetooth: <b>3.0+EDR</b><br>
    Слот расширения:<b> microSD (совместимо с SDHC)</b><br>
    Сети:<b> GSM/GPRS/EDGE (900/1800 МГц); UMTS/HSPA (2100 МГц)</b><br>
    Встроенный GPS-приемник<br>
    Дополнительно:<br>
    <b>• Поддержка двух SIM-карт (Dual SIM Dual Standby)</b><br>
    <b>• G-сенсор&nbsp;</b><br>
    <b>• Датчик приближения&nbsp;</b><br>
    <b>• Датчик света</b></p>


<h2>
    Дополнения к официальной части</h2>


<p>
    Сразу с телефоном прилагается качественно наклеенная на экран пленка, с
 этим можно не заморачиваться при покупке. Сборка корпуса также 
добротная - задняя крышка (софттач пластик) плотно закрывается и не 
люфтит. С телефоном идет гарнитура, но не прилагается никакой карты 
памяти. Кабель usb и usb-зарядка присутствуют.</p>


<h2>
    Плюсы и минусы</h2>


<p>
    <strong>Сначала про плюсы.</strong></p>


<p>
    Телефон хорошо звучит - громкий и чистый задний динамик, поддерживает 
2sim-карты, относительно шустро работает (пока не забилась память, об 
этом расскажу ниже), имеет фонарик сзади (правда очень слабенький). В 
целом дизайн довольно приятный, а кнопки расположены довольно удобно. Их
 вообще немного: кнопка включения/блокировки расположена на правом торце
 девайса и ее удобно нажимать большим пальцем, когда телефон лежит в 
ладони, а качелька громкости расположена на левом торце. Нажимаются они 
довольно четко и приятно, надеюсь прослужат долго&#8230; Панель кнопок для 
навигации по андроиду выполнена в виде сенсорных кнопок внизу экрана и 
подсвечиваются белым свечением.</p>


<p>
    <strong>Минусы.</strong></p>


<p>
    Из главных недостатков я бы отметил следующие (в порядке убывания 
важности): объем ОЗУ маловат по современным меркам (512мб), отсутствие 
автофокуса у встроенной камеры, TFT экран вместо IPS. Что касается 
памяти, то в данной модели она является как бы ограничивающим фактором 
общей производительности. Если запустить сразу несколько ресурсоёмких 
приложений, то телефон начнет лагать, приложения могут подвиснуть, а 
чаще и совсем вылетают. В особенности это сказывается на браузере и 
&#8220;тяжеловесных&#8221; сайтах. Про камеру: в этом аппарате задняя камера снимает
 более менее нормально только при хорошем освещении, а отсутствие 
автофокуса делает затруднительным съемку документов с мелким шрифтом. 
Экран. Честно говоря экран меня всем устраивает - он тут довольно яркий и
 сочный, разрешения хватает для комфортного просмотра, а это главное. 
Правда слабоваты углы обзора, но для 4&#8221; экрана это не критично.</p>


<p><strong>Пример фото с камеры</strong></p>

<table border="0">
    <tbody>
        <tr>
            <td>
                <a class="fancybox" href="http://poetofcode.ru/images/spark-photo/Show4.jpg" rel="group"><img alt="" src="http://poetofcode.ru/images/spark-photo/Show5.jpg"></a></td>
            <td>
                <a class="fancybox" href="http://poetofcode.ru/images/spark-photo/Show7.jpg" rel="group"><img alt="" src="http://poetofcode.ru/images/spark-photo/Show6.jpg"></a></td>
            <td>
                <a class="fancybox" href="http://poetofcode.ru/images/spark-photo/Show8.jpg" rel="group"><img alt="" src="http://poetofcode.ru/images/spark-photo/Show13.jpg"></a></td>
        </tr>
        <tr>
            <td>
                <a class="fancybox" href="http://poetofcode.ru/images/spark-photo/Show9.jpg" rel="group"><img alt="" src="http://poetofcode.ru/images/spark-photo/Show14.jpg"></a></td>
            <td>
                <a class="fancybox" href="http://poetofcode.ru/images/spark-photo/Show10.jpg" rel="group"><img alt="" src="http://poetofcode.ru/images/spark-photo/Show15.jpg"></a></td>
            <td>
                <a class="fancybox" href="http://poetofcode.ru/images/spark-photo/Show17.jpg" rel="group"><img alt="" src="http://poetofcode.ru/images/spark-photo/Show19.jpg"></a></td>
        </tr>
    </tbody>
</table>




<br />


<br />


<p><strong>Пример видео</strong></p>

<div style="width:100%; text-align: center; border: 0px !important; box-shadow: none;">
<iframe width="640" height="360" src="http://poetofcode.ru//www.youtube.com/embed/4TI-8qdiqz4?feature=player_embedded" frameborder="0" allowfullscreen></iframe>
</div>


<h2>
    Заключение</h2>


<p>
    Безусловно, Spark - удачная модель в линейке телефонов Highscreen. 
Чувствуется, что эта вещь сделана не для галочки, а для повседневных 
задач самого разного профиля.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Установка и настройка Kohana на Ubuntu]]></title>
    <link href="http://poetofcode.ru/blog/2013/01/05/ustanovka-i-nastroika-kohana-na-ubuntu/"/>
    <updated>2013-01-05T21:28:10+04:00</updated>
    <id>http://poetofcode.ru/blog/2013/01/05/ustanovka-i-nastroika-kohana-na-ubuntu</id>
    <content type="html"><![CDATA[<h2>Исходные данные</h2>

<ul>
    <li>
        ОС Ubuntu</li>
    <li>
        Установленный LAMP-сервер (<a href="http://help.ubuntu.ru/wiki/lamp">http://help.ubuntu.ru/wiki/lamp</a>)</li>
</ul>




<!-- more -->




<h2>
    Установка Kohana</h2>


<p>
    Переходим на сайт фрэймворка и скачиваем последнюю версию:&nbsp;<a href="http://kohanaframework.org/">http://kohanaframework.org/</a></p>


<p>
    Распаковываем содержимое скачанного архива <em>kohana-3.3.0.zip</em> (ваша версия может отличаться) в директорию <strong>/var/www/</strong>. Так как в архиве обычно присутствует одна папка &#8220;kohana&#8221;, то в результате путь до исходников должен получиться таким: <strong>/var/www/kohana/</strong></p>


<h2>
    Создание виртуального хоста для проекта</h2>


<p>
    Виртуальные хосты позволяют размещать несколько сайтов на одном 
веб-сервере. Наша задача - настроить виртуальный хост для сервера 
Apache2. Для этого создадим и отредактируем файлик виртуального хоста 
для нашего проекта:<br>
    <br>
    <code class="functions" style="line-height: 14.519999504089355px; font-size: 13.600000381469727px; margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">sudo</code><span style="color: rgb(0, 0, 0); font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13.600000381469727px; line-height: 14.519999504089355px;">&nbsp;gedit</span><code class="plain" style="line-height: 14.519999504089355px; font-size: 13.600000381469727px; color: rgb(0, 0, 0); margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important;">&nbsp;/etc/apache2/sites-available/kohana</code><br>
    <br>
    Вставьте следующее содержимое:<br>
    &nbsp;</p>


<pre>NameVirtualHost *:80

&lt;VirtualHost *:80&gt;
     ServerAdmin    webmaster@ubuntu
     ServerName     khn.localhost
 
     DocumentRoot /var/www/kohana
 
     &lt;Directory "/var/www/kohana"&gt;
          AllowOverride All
          Order Allow,Deny
          Allow From All
     &lt;/Directory&gt;
&lt;/VirtualHost&gt;

</pre>


<p>
    Теперь необходимо активировать нашу конфигурацию командой:<br>
    <br>
    <code class="bash functions" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">sudo</code><span style="color: rgb(68, 68, 68); font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; line-height: 14.300000190734863px; white-space: pre;"> </span><code class="bash plain" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: black !important;">a2ensite kohana</code><br>
    <br>
    (для отключения используется команда:<code class="bash plain" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: black !important;">&nbsp;</code><code class="bash functions" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">sudo</code><span style="color: rgb(68, 68, 68); font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; line-height: 14.300000190734863px; white-space: pre;"> </span><code class="bash plain" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: black !important;">a2dissite kohana</code>)</p>


<p>
    Далее добавляем в файл hosts алиас на наш новый проект следующей командой:<br>
    <br>
    <font color="#000000" face="Consolas, Bitstream Vera Sans Mono, Courier New, Courier, monospace" size="2"><span style="line-height: 14.300000190734863px; white-space: pre;">sudo gedit /etc/hosts</span></font><br>
    <br>
    добавьте в конец строчку:</p>


<p>
    <span style="font-size: 13.600000381469727px; line-height: 14.399999618530273px;">127.0.0.1 khn.localhost</span></p>


<p>
    Рестартуем сервер:<br>
    <br>
    <code class="bash functions" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">sudo</code><span style="color: rgb(68, 68, 68); font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; line-height: 14.300000190734863px; white-space: pre;"> </span><code class="bash plain" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: black !important;">/etc/init</code><code class="bash plain" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: black !important;">.d</code><code class="bash plain" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: black !important;">/apache2</code><span style="color: rgb(68, 68, 68); font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; line-height: 14.300000190734863px; white-space: pre;"> </span><code class="bash plain" style="line-height: 14.300000190734863px; font-size: 13px; white-space: pre; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: black !important;">restart</code></p>


<p>
    Теперь можно оценить результат. Откройте в своем браузере адрес нашего проекта: http://khn.localhost/</p>


<p>
    Здесь вы должны увидеть страницу тестов окружения Kohana такого плана:<br>
    <br>
    <img alt="" src="http://poetofcode.ru/images/kohana-fail.png" style="width: 421px; height: 416px;"></p>


<p>
    Тесты рапортуют о некорректной настройке из-за отсутствия прав на 
запись у директорий для файлов &nbsp;кэша и логов. Установим нужные 
права:<br>
    &nbsp;</p>


<div class="line alt1" style="line-height: 14.519999504089355px; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13.600000381469727px; margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; min-height: auto !important;">
    <code class="functions" style="line-height: 14.519999504089355px; font-size: 13.600000381469727px; margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">sudo</code><span style="color: rgb(0, 0, 0); font-size: 13.600000381469727px; line-height: 14.519999504089355px;">&nbsp;</span><code class="functions" style="line-height: 14.519999504089355px; font-size: 13.600000381469727px; margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">chmod</code><span style="color: rgb(0, 0, 0); font-size: 13.600000381469727px; line-height: 14.519999504089355px;">&nbsp;</span><code class="plain" style="line-height: 14.519999504089355px; font-size: 13.600000381469727px; color: rgb(0, 0, 0); margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important;">a+w /var/www/kohana/application/logs/<br>
    <code class="functions" style="background-color: rgb(248, 248, 248); line-height: 14.519999504089355px; font-size: 13.600000381469727px; margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">sudo</code><span style="font-size: 13.600000381469727px; line-height: 14.519999504089355px; background-color: rgb(248, 248, 248);">&nbsp;</span><code class="functions" style="background-color: rgb(248, 248, 248); line-height: 14.519999504089355px; font-size: 13.600000381469727px; margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important; color: rgb(255, 20, 147) !important;">chmod</code><span style="font-size: 13.600000381469727px; line-height: 14.519999504089355px; background-color: rgb(248, 248, 248);">&nbsp;</span><code class="plain" style="background-color: rgb(248, 248, 248); line-height: 14.519999504089355px; font-size: 13.600000381469727px; margin: 0px !important; padding: 0px !important; border: 0px !important; outline: 0px !important; background-image: none !important; float: none !important; vertical-align: baseline !important; position: static !important; left: auto !important; top: auto !important; right: auto !important; bottom: auto !important; height: auto !important; width: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; min-height: auto !important;">a+w /var/www/kohana/application/cache/</code></code></div>


<p>
    &nbsp;</p>


<p>
    Перезагрузим страничку&nbsp;http://khn.localhost/. Теперь всё должно быть нормально:<br>
    <br>
    <img alt="" src="http://poetofcode.ru/images/kohana-success.png" style="width: 598px; height: 96px;"></p>


<p>
    Кстати, эта же страничка подсказывает нам, что следующим действием мы должны удалить (или переименовать) файлик install.php</p>


<p>
    В результате этого, перезагрузив страничку нашего сайта мы должны увидеть стандартную надпись:<br>
    <br>
    <span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium;">hello, world!</span></p>

]]></content>
  </entry>
  
</feed>
