---
layout: post
title: "Популярно про cookies, сессии и авторизацию"
date: 2015-10-08 17:45:12 +0300
comments: true
categories: 
---

Эта заметка посвящена довольно простым вещам, но тем не менее - это именно то, с чего начинается разработка каждого сайта, где пользователи могут заводить учётные записи. Что-то подсказывает мне, что веб-программисты, которые считают себя достаточно опытными придерживаются такого мнения о себе благодаря знанию нескольких ключевых тем в вебе. Например, таких как регистрация/авторизация пользователей, работа с БД и паттерн MVC. Первой теме я уделю внимание прямо сейчас...

# В чём суть механизма авторизации пользователя?

Предположим, что пользователь уже завёл на сайте учётную запись, то есть зарегистрировался. После этого он может войти на сайт под теми логином и паролем, которые он выбрал при регистрации.

Когда он вводит эти два поля в форму для авторизации и отсылает их, то на сервер передаются эти два поля и сервер отправляет обратно клиенту (браузеру) ответ в виде страницы, которую должен увидеть уже авторизованный юзер. Допустим, это его личный профиль. То есть сервер посчитал пользователя "своим" в тот момент, когда нашёл в своей базе данных пользователя с переданной парой логин/пароль. Но на какое время пользователь авторизовался? Что будет если попытаться перейти по какой-нибудь ссылке в его профиле, скажем - посмотреть все фото, загруженные в альбом пользователя?

Для того, чтобы показать этот альбом с фотками серверу снова нужно удостовериться, что запрос пришёл от настоящего "хозяина" профиля, то есть человека знающего нужные логин/пароль. Другими словами серверу вновь понадобятся логин и пароль, поэтому он покажет страницу с формой авторизации.

И так будет повторяться каждый раз при сёрфинге по сайту.

# Почему так происходит?

Описанное поведение обусловлено тем фактом, что HTTP - это **stateless** протокол или по-русски - протокол без сохранения состояния. Но что под этим подразумевается? Лучше всего об этом написано в [Википедии](https://ru.wikipedia.org/wiki/HTTP):

> В отличие от многих других протоколов, HTTP не сохраняет своего состояния. Это означает отсутствие сохранения промежуточного состояния между парами «запрос-ответ». Компоненты, использующие HTTP, могут самостоятельно осуществлять сохранение информации о состоянии, связанной с последними запросами и ответами (например, «куки» на стороне клиента, «сессии» на стороне сервера). Браузер, посылающий запросы, может отслеживать задержки ответов. Сервер может хранить IP-адреса и заголовки запросов последних клиентов. Однако сам протокол не осведомлён о предыдущих запросах и ответах, в нём не предусмотрена внутренняя поддержка состояния, к нему не предъявляются такие требования

Говоря простым языком, сосотояние - это некий набор параметров, которые могут присутствовать у чего-либо, а при изменении они запоминаются. Допустим, присваивая в программе какой-нибудь переменной значение, вы изменяете состояние программы. И вот это именно то, чего нет у HTTP протокола.

Как раз этот факт объясняет то поведение, при котором сервер "не помнит", что пользователь недавно вводил свои данные и обрабатывает запрос как запрос от совершенно незнакомого клиента, т.е. показывает форму авторизации.

Вообще эта особенность HTTP - не баг, а фича. Так сделано для того, чтобы не тратилось время на восстановление соединения при каждом новом запросе. И это означает, что ответственность за сохранение нужных нам параметров перекладывается с протокола на клиент и сервер.

Чтобы не дать клиенту и серверу забыть о том, что пользователь авторизовался нам доступны разные механизмы:

- "куки" на клиенте
- сессии на сервере
- скрытые текстовые поля в html-формах
- GET-параметры запросов, например:  /index?session_id=идентификатор_сессии


# Что такое cookies?

"Куки" - это порция текстовой информации, которая 