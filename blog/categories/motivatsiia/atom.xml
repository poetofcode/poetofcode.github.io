<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: мотивация | PoetOfCode' Blog]]></title>
  <link href="http://poetofcode.ru/blog/categories/motivatsiia/atom.xml" rel="self"/>
  <link href="http://poetofcode.ru/"/>
  <updated>2015-04-03T17:24:35+04:00</updated>
  <id>http://poetofcode.ru/</id>
  <author>
    <name><![CDATA[PoetOfCode]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Зачем открывать чёртов редактор]]></title>
    <link href="http://poetofcode.ru/blog/2015/03/15/zachiem-otkryvat-chiortov-riedaktor/"/>
    <updated>2015-03-15T13:02:30+04:00</updated>
    <id>http://poetofcode.ru/blog/2015/03/15/zachiem-otkryvat-chiortov-riedaktor</id>
    <content type="html"><![CDATA[<p style="color: #333; font-style: italic">
Я недавно прочитал один прикольный пост Джоэла Спольски. Он рассказывает о том, как двигаться вперед, делать прогресс в чём-либо. И это понимание очень полезно именно в нашем программерском деле.<br>

Приведу отрывок из поста, будет полезно возвращаться к нему в периоды послабления мотивации.
</p>




<!-- more -->




<div>
<p>Многие мои дни проходят так:</p>

<ol style="margin-left: 30px">
<li>Прихожу на работу.
<li>Проверяю почту, хожу по Интернету и т. д.
<li>Решаю, что можно пообедать, прежде чем браться за работу.
<li>Возвращаюсь с обеда.
<li>Проверяю почту, хожу по Интернету и т. д.
<li>Наконец, решаю, что пора начать работать.
<li>Проверяю почту, хожу по Интернету и т. д.
<li>Снова решаю, что теперь действительно пора начать работать.
<li>Запускаю чертов редактор.</li>
<li>Без передышки пишу код, пока не обнаруживаю, что уже полвосьмого вечера.</li>
</ol>

<p>По видимому, между этапами 8 и 9 есть какой то дефект, потому что мне
не всегда удается преодолеть находящуюся между ними пропасть. Самое
трудное для меня – это начать. Тело, находящееся в покое, стремится сохранять состояние покоя. В моем мозгу есть что то невероятно тяжелое,
из за чего его крайне трудно разогнать, но когда он разгонится до полной
скорости, поддерживать ее нетрудно. <...> 
</p>

<p>Может быть, в этом и лежит ключ к продуктивности: <span style="font-style: italic">надо просто начать</span>. Может быть, если программирование парами эффективно, то это
потому, что когда вы планируете со своим приятелем сеанс парного программирования, вы подстегиваете друг друга начать работу.
</p>

<p>Когда я был в Израиле парашютистом, один генерал произнес перед нами небольшую речь по поводу стратегии. Когда пехота ведет бой, сообщил
он нам, у нее может быть только одна стратегия: огонь и движение. Вы движетесь в сторону противника и одновременно ведете огонь из своего оружия. Ваш огонь вынуждает противника спрятать голову, поэтому он не может вести ответный огонь. (Это и имеет в виду солдат, когда кричит «прикрой меня». Это значит «стреляй в противника, чтобы он опустил голову
и не мог стрелять в меня, пока я буду перебегать улицу». И это действует.)
Движение позволяет захватить территорию и приблизиться к врагу, и тогда ваши выстрелы вернее поразят цель. Если вы не движетесь, то развитие событий станет определять противник, а это нехорошо. Если вы не ведете огонь, противник станет вести огонь по вам и уложит вас.
</p>

<p>Я надолго запомнил это. Я заметил, что почти каждый тип военной стратегии, от воздушного боя до больших морских маневров, основан на идее «огня и движения». Мне понадобилось еще 15 лет, чтобы понять, что по принципу «огня и движения» вы достигаете целей в жизни. Надо хоть немного продвигаться вперед, каждый день. Пусть ваш код кривой, с ошибками и никому не нужен. Если вы неуклонно движетесь вперед, совершенствуя код и исправляя ошибки, время на вашей стороне. Будьте осторожны, когда конкуренты открывают по вам огонь. Не хотят ли они просто заставить вас отвечать на их очереди, чтобы вы не смогли двигаться дальше?
</p>

<p><...></p>

<p>Для небольших компаний, таких как моя, «огонь и движение» означает две вещи. Вы должны привлечь время на свою сторону, вы должны ежедневно продвигаться вперед. Рано или поздно вы победите. Все, что мне удалось вчера сделать, – это немного улучшить цветовую схему FogBUGZ.
Это нормально. Все постепенно делается лучше. С каждым днем наша программа становится все лучше, и покупателей становится все больше, и это самое главное. Пока мы не достигли размеров Oracle, нам не нужно выдумывать грандиозные стратегии. Нам надо просто приходить каждое утро
и пытаться запустить редактор.
</p>

<p style="color: #333; font-style: italic">
Полный тест можно найти в книге Д. Спольски "Джоэл о программировании"
</p>


</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обучение новым трюкам]]></title>
    <link href="http://poetofcode.ru/blog/2014/01/11/obuchieniie-novym-triukam/"/>
    <updated>2014-01-11T17:18:31+04:00</updated>
    <id>http://poetofcode.ru/blog/2014/01/11/obuchieniie-novym-triukam</id>
    <content type="html"><![CDATA[<p>В этой заметке я хочу поговорить об одном из методов увеличения скорости и качества получения новых знаний.</p>

<p><img src="http://poetofcode.ru/images/its_never_too_late_to_learn.jpg" alt="Учиться никода не поздно" style="float: right; width: 350px; margin: 20px;" /></p>

<div>
Всем программистам в процессе работы приходится заниматься одним и тем же делом - изучать новый для себя материал перед написанием кода и решением конкретной задачи. Не всем это занятие приходится по душе, но с этим ничего не поделаешь, такова специфика работы. 

Практика показывает, что молодые программисты, недавно приступившие к работе, берутся за нее с гораздо большим энтузиазмом, чем их опытные коллеги. Это подчас приводит к тому, что программисты-новички через определенное непродолжительное время ознакомления с новой для них областью начинают разбираться в ней лучше, чем спецы с многолетним стажем.
</div>




<p style="clear: both;"></p>




<!-- more -->


<p>Во многом так получается еще и потому что область знаний, в которой мы работаем изменяется слишком быстро. А знания последних достижений в области ценится выше, чем опыт в устаревших подходах. К примеру, так дела обстоят в Web технологиях. За последние годы Web-разработка сильно изменилась: вышла масса новых серверных фрэймворком, а клиентская часть усложнилась настолько, что старые знания едва ли смогут чем-то помочь.</p>

<p>Специалист, освоивший JavaScript фрэймворк AngularJS сможет реализовать гораздо более сложные клиентские интерфейсы, чем профи в JQuery за меньшее время. Семантическая разметка HTML5 и богатые возможности верстки с помощью CSS3 помогут программисту в написании сайтов, ориентированных для большего числа устройств, а также обеспечат лучшее место в поиске.</p>

<p>Очевидно, что нам всегда нужно поддерживать свои знания в актуальном состоянии. Проблема тут в том, что поддерживать мотивацию к изучению нового становится всё труднее со временем. На первый взгляд кажется, что технологий слишком много, а обновления происходят слишком часто. Конечно доля правды в этом есть. Но как часто это бывает в основном проблема лежит на уровне психологии.</p>

<p>Для себя я открыл некий способ самообмана. Каждый раз когда мне приходится изучать что-то новое &ndash; я просто &ldquo;обнуляю счётчик&rdquo;, то есть представляю будто бы делаю это в первый раз. В какой-то степени это позволяет всятряхнуться, посмотреть на вещи (пусть отчасти знакомые) под другим углом. По сути я становлюсь тем новичком, который рвётся в бой с новыми силами на штурм новой технологии, не ведая (пока что) о том, что его ждёт целая череда подводных камней, ограничений и прочих трудностей.</p>

<p>Смысл в том, чтобы освободить на какое-то время свой разум от &ldquo;груза&rdquo; прошлого опыта. В конце концов иногда это помогает просто перебороть свою лень и открыть статью/книгу/исходники. На какое-то время это работает, ну а дальше поддерживать интерес уже значительно проще.</p>
]]></content>
  </entry>
  
</feed>
