<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | PoetOfCode' Blog]]></title>
  <link href="http://poetofcode.ru/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://poetofcode.ru/"/>
  <updated>2015-01-30T14:55:49+04:00</updated>
  <id>http://poetofcode.ru/</id>
  <author>
    <name><![CDATA[PoetOfCode]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[В последний раз про .gitignore]]></title>
    <link href="http://poetofcode.ru/blog/2013/02/05/v-posliednii-raz-pro-gitignore/"/>
    <updated>2013-02-05T22:28:24+04:00</updated>
    <id>http://poetofcode.ru/blog/2013/02/05/v-posliednii-raz-pro-gitignore</id>
    <content type="html"><![CDATA[<p>Довольно туманным для меня вопросом при переходе с SVN на Git стал вопрос об игнорировании ненужных файлов в репозитории. Поэтому оставлю тут запись, чтоб самому не забыть.</p>

<p>На самом деле все не слишком сложно и доступно в странице мануала по gitignore (<em>man gitignore</em> либо <em>git help ignore</em>)</p>

<!-- more -->


<p>Есть всего 3 варианта, которые могут возникнуть с игнорированием файлов в Git:</p>

<p>Файлы еще не добавлены под контроль версий (untracked).
В этом случае и нужен файл <em>.gitignore</em>.
Пример содержимого файла:</p>

<pre><code>/application/cache/*
/application/logs/*
</code></pre>

<p>Если теперь закоммитить <em>.gitignore</em>, то содержимое этих папок (пример из файловой структуры Kohana) не будет больше интересовать git. Можете убедиться в этом, выполнив команду <em>git status</em>
Файлы уже добавлены под контроль версий (tracked).
Для этого случая предусмотрена команда:</p>

<pre><code>$ git update-index --assume-unchanged ./filename.txt
</code></pre>

<p>Теперь новые изменения в файле <em>filename.txt</em> будут игнорироваться git'ом. Для того чтобы заставить git вновь реагировать на изменения существует обратная команда:</p>

<pre><code>$ git update-index --no-assume-unchanged ./filename.txt
</code></pre>

<p>Если файлы по ошибке попали под контроль, но быть там не должны (логи, кэш и прочие временные файлы), то удалить их оттуда можно командой:</p>

<pre><code>$ git rm --cached ./log.txt
</code></pre>

<p>Также есть хорошие примеры в самом мануале по команде.</p>
]]></content>
  </entry>
  
</feed>
